[
    {
        "id": "61cc80910aede988",
        "type": "tab",
        "label": "Audio System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a9f14b34.b4b698",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "Playing?",
        "func": "const isPlaying = msg.payload.indexOf('\"playing\"') >= 0;\nnode.status({\n    fill: isPlaying ? \"blue\" : \"yellow\",\n    shape: \"dot\",\n    text: isPlaying ? 'playing' : 'not playing'\n});\n\nconst flowMusicOn = flow.get('music_on');\nif (isPlaying !== flowMusicOn) {\n    flow.set('music_on', isPlaying);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "8fc31dc0.fe6ff"
            ]
        ]
    },
    {
        "id": "8fc31dc0.fe6ff",
        "type": "link out",
        "z": "61cc80910aede988",
        "name": "update amp power",
        "mode": "link",
        "links": [
            "bc4bddd9e7b73ff6",
            "fca32fff6a920574"
        ],
        "x": 835,
        "y": 340,
        "wires": []
    },
    {
        "id": "5c740848.5ee358",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "dbus-send --system --print-reply --dest=org.bluez /org/bluez/hci0/dev_F8_0F_F9_A0_32_AF/player0 org.freedesktop.DBus.Properties.Get string:org.bluez.MediaPlayer1 string:Status || exit 0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check",
        "x": 680,
        "y": 240,
        "wires": [
            [
                "a9f14b34.b4b698"
            ],
            [],
            []
        ]
    },
    {
        "id": "405fa020.fd7e",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "dbus-send --system --print-reply --dest=org.bluez /org/bluez/hci0/dev_F8_0F_F9_A0_32_AF org.freedesktop.DBus.Properties.Get string:org.bluez.MediaControl1 string:Connected || exit 0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check Google Home",
        "x": 340,
        "y": 240,
        "wires": [
            [
                "645350d4.805c"
            ],
            [],
            []
        ]
    },
    {
        "id": "645350d4.805c",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "connected?",
        "func": "if (msg.payload.indexOf('boolean true') >= 0) {\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"connected\" });\n    return [msg, null];\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"disconnected\" });\n    return [null, {\n        payload: 'disconnected'\n    }];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "5c740848.5ee358"
            ],
            [
                "a9f14b34.b4b698"
            ]
        ]
    },
    {
        "id": "a6b1d4e441d9274d",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "update amp state",
        "func": "const desiredPower =\n    flow.get('tv_on') ||\n    flow.get('music_on') ||\n    flow.get('mpd_on') ||\n    flow.get('pickup_on');\nconst desiredChannel = 6;\nconst state = flow.get('amp');\n\nnode.status({\n    fill: desiredPower ? 'blue' : 'yellow',\n    text: desiredPower ? 'on' : 'off'\n});\n\nif (desiredPower !== state?.on ||\n    desiredPower && desiredChannel !== state?.channel) {\n\n    if (!desiredPower) {\n        return {\n            payload: {\n                on: false,\n            }\n        };\n    } else {\n        return [\n            { reset: true },\n            {\n                payload: {\n                    on: true,\n                    channel: desiredChannel,\n                }\n            }\n        ]\n    }\n} else {\n    return { reset: true };\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 120,
        "wires": [
            [
                "63a3e87f72239626"
            ],
            [
                "55eab197e2677c50"
            ]
        ]
    },
    {
        "id": "4ec33041d75c6b43",
        "type": "change",
        "z": "61cc80910aede988",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "amp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "63a3e87f72239626",
        "type": "trigger",
        "z": "61cc80910aede988",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "55eab197e2677c50"
            ]
        ]
    },
    {
        "id": "fca32fff6a920574",
        "type": "link in",
        "z": "61cc80910aede988",
        "name": "link in 1",
        "links": [
            "8fc31dc0.fe6ff",
            "b6bf4e6d.2b16c",
            "c5314d368e3fdc95",
            "253b433ba2e36077"
        ],
        "x": 195,
        "y": 120,
        "wires": [
            [
                "a6b1d4e441d9274d"
            ]
        ]
    },
    {
        "id": "72e745c5feb21fb9",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "change volume",
        "func": "const amp = flow.get('amp');\nif (!amp?.on || !flow.get('tv_on')) {\n    node.status({\n        fill: \"yellow\",\n        text: `ignore TV`\n    });\n    return;\n}\n\nconst desiredVolume = msg.payload.mute\n    ? 10\n    : Math.round(msg.payload.volume * 1.7);\nconst currentVolume = amp.volume;\nif (Math.abs(desiredVolume - currentVolume) < 2) {\n    return;\n}\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: `d: ${desiredVolume}` });\n\nreturn {\n    payload: {\n        volume: desiredVolume,\n    },\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "55eab197e2677c50"
            ]
        ]
    },
    {
        "id": "926d9d5a42bd0f61",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "LG - get volume",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "const spi = SPI.initialize(\"/dev/spidev0.0\");\n\nconst readSpdifStatus = Buffer.from([\n    0x01, //read\n    0xF6,\n    0x17,\n    0,\n    0,\n    0,\n    0,\n    0\n]);\n\nsetInterval(() => {\n    spi.transfer(readSpdifStatus, readSpdifStatus.length, onSpiMessage);\n}, 500);\n\n\n/**\n * @param {Error|null} e\n * @param {Buffer|undefined} d\n */\nfunction onSpiMessage(e, d) {\n    if (e) node.error(e);\n    else decode(d.slice(3));\n}\n\nlet lastVolume = -1;\nlet lastMute = null;\n\n/**\n * @param {Buffer} out\n */\nfunction decode(out) {\n    const padded = Buffer.concat([Buffer.alloc(3, 0), out]);\n    const value = padded.readBigInt64BE();\n\n    const SIGNATURE_MASK = 0xfffffn;\n    const SIGNATURE_VALUE = 0xf048an;\n\n    if ((value & SIGNATURE_MASK) !== SIGNATURE_VALUE) {\n        return;\n    }\n\n    const volumeByte = Number((value >> 20n) & 0xFFn);\n    const volume = volumeByte & 0x7F;\n    const mute = (volumeByte & 0x80) !== 0;\n\n    if (volume !== lastVolume || mute !== lastMute) {\n        lastVolume = volume;\n        lastMute = mute;\n        node.status({ fill: \"blue\", shape: \"dot\", text: `vol: ${volume}${mute ? ' mute' : ''}` });\n    }\n\n    node.send({\n        payload: {\n            mute,\n            volume,\n        }\n    });\n}\n",
        "finalize": "",
        "libs": [
            {
                "var": "SPI",
                "module": "pi-spi"
            }
        ],
        "x": 140,
        "y": 160,
        "wires": [
            [
                "72e745c5feb21fb9"
            ]
        ]
    },
    {
        "id": "8ab27e65.532f6",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "Is TV on?",
        "func": "const tvStatus = msg.payload.code === 0;\n\nnode.status({\n    fill: tvStatus ? 'blue' : 'yellow',\n    shape: \"dot\",\n    text: tvStatus ? 'on' : 'off'\n});\n\nconst flowStatus = flow.get('tv_on');\nif (flowStatus !== tvStatus) {\n    flow.set('tv_on', tvStatus);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 360,
        "wires": [
            [
                "8fc31dc0.fe6ff"
            ]
        ]
    },
    {
        "id": "a8b6f0d7673b1662",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": " ping 192.168.68.7 -c 1 -w 1",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check TV",
        "x": 300,
        "y": 360,
        "wires": [
            [],
            [],
            [
                "8ab27e65.532f6"
            ]
        ]
    },
    {
        "id": "bdc5b717eb410f26",
        "type": "inject",
        "z": "61cc80910aede988",
        "name": "repeat",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "a8b6f0d7673b1662",
                "405fa020.fd7e",
                "3b193b627d4296f7",
                "926681effd534af1"
            ]
        ]
    },
    {
        "id": "e0bdc5ad6eb97354",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "MPD status",
        "func": "const match = /\\[(\\w+)\\]/gm.exec(msg.payload);\nconst status = match?.[1];\n\nnode.status({\n    fill: status ? 'blue' : 'red',\n    shape: \"dot\",\n    text: status || 'stopped',\n});\n\nif (!status) {\n    return;\n}\n\nconst isPlaying = status === 'playing';\nconst flowStatus = flow.get('mpd_on');\nif (flowStatus !== isPlaying) {\n    flow.set('mpd_on', isPlaying);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "8fc31dc0.fe6ff"
            ]
        ]
    },
    {
        "id": "3b193b627d4296f7",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "mpc",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check MPD",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "e0bdc5ad6eb97354"
            ],
            [],
            []
        ]
    },
    {
        "id": "926681effd534af1",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "dbus-send --system --print-reply --dest=org.bluez /org/bluez/hci0/dev_F4_04_4C_1F_86_E1 org.freedesktop.DBus.Properties.Get string:org.bluez.MediaControl1 string:Connected || exit 0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check pickup",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "60531eca046b5249"
            ],
            [],
            []
        ]
    },
    {
        "id": "60531eca046b5249",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "connected?",
        "func": "const connected = msg.payload.indexOf('boolean true') >= 0;\nif (msg.payload.indexOf('boolean true') >= 0) {\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"connected\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"disconnected\" });\n}\n\nconst flowPickupOn = flow.get('pickup_on');\nif (connected !== flowPickupOn) {\n    flow.set('pickup_on', connected);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 300,
        "wires": [
            [
                "8fc31dc0.fe6ff"
            ]
        ]
    },
    {
        "id": "55eab197e2677c50",
        "type": "amp-node",
        "z": "61cc80910aede988",
        "port": "serial:///dev/serial/by-id/usb-Silicon_Labs_CP2102_USB_to_UART_Bridge_Controller_0001-if00-port0?baudRate=57600",
        "name": "Amp",
        "x": 690,
        "y": 160,
        "wires": [
            [
                "4ec33041d75c6b43"
            ]
        ]
    },
    {
        "id": "d3ee84a6157fb1fc",
        "type": "inject",
        "z": "61cc80910aede988",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "a6b1d4e441d9274d"
            ]
        ]
    }
]