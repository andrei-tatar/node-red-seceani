[
    {
        "id": "61cc80910aede988",
        "type": "tab",
        "label": "Audio System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2dd98965cb8d503c",
        "type": "serial-port",
        "serialport": "/dev/serial/by-id/usb-Silicon_Labs_CP2102_USB_to_UART_Bridge_Controller_0001-if00-port0",
        "serialbaud": "57600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "10",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "7b2707f28190958d",
        "type": "serial-port",
        "serialport": "/dev/serial/by-id/usb-Prolific_Technology_Inc._USB-Serial_Controller-if00-port0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "5",
        "bin": "bin",
        "out": "interbyte",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "b6bf4e6d.2b16c",
        "type": "link out",
        "z": "61cc80910aede988",
        "name": "update amp power",
        "links": [
            "50e2118a.c5d65",
            "bc4bddd9e7b73ff6",
            "fca32fff6a920574"
        ],
        "x": 655,
        "y": 420,
        "wires": []
    },
    {
        "id": "a9f14b34.b4b698",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "Playing?",
        "func": "const isPlaying = msg.payload.indexOf('\"playing\"') >= 0;\nnode.status({\n    fill: isPlaying ? \"blue\" : \"yellow\",\n    shape: \"dot\",\n    text: isPlaying ? 'playing' : 'not playing'\n});\n\nconst flowMusicOn = flow.get('music_on');\nif (isPlaying !== flowMusicOn) {\n    flow.set('music_on', isPlaying);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "8fc31dc0.fe6ff"
            ]
        ]
    },
    {
        "id": "8fc31dc0.fe6ff",
        "type": "link out",
        "z": "61cc80910aede988",
        "name": "update amp power",
        "mode": "link",
        "links": [
            "bc4bddd9e7b73ff6",
            "fca32fff6a920574"
        ],
        "x": 925,
        "y": 300,
        "wires": []
    },
    {
        "id": "5c740848.5ee358",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "dbus-send --system --print-reply --dest=org.bluez /org/bluez/hci0/dev_F8_0F_F9_A0_32_AF/player0 org.freedesktop.DBus.Properties.Get string:org.bluez.MediaPlayer1 string:Status || exit 0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check",
        "x": 680,
        "y": 300,
        "wires": [
            [
                "a9f14b34.b4b698"
            ],
            [],
            []
        ]
    },
    {
        "id": "405fa020.fd7e",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "dbus-send --system --print-reply --dest=org.bluez /org/bluez/hci0/dev_F8_0F_F9_A0_32_AF org.freedesktop.DBus.Properties.Get string:org.bluez.MediaControl1 string:Connected || exit 0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check Google Home",
        "x": 340,
        "y": 300,
        "wires": [
            [
                "645350d4.805c"
            ],
            [],
            []
        ]
    },
    {
        "id": "645350d4.805c",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "connected?",
        "func": "if (msg.payload.indexOf('boolean true') >= 0) {\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"connected\" });\n    return [msg, null];\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"disconnected\" });\n    return [null, { payload: false }];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 300,
        "wires": [
            [
                "5c740848.5ee358"
            ],
            []
        ]
    },
    {
        "id": "a6b1d4e441d9274d",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "update amp state",
        "func": "const desiredPower = flow.get('tv_on') || flow.get('music_on') ||\n    flow.get('mpd_on') || flow.get('pickup_on');\nconst desiredChannel = 6;\nconst state = flow.get('amp');\n\nif (desiredPower !== state?.on ||\n    desiredPower && desiredChannel !== state?.channel) {\n\n    if (!desiredPower) {\n        return {\n            payload: {\n                on: false,\n            }\n        };\n    } else {\n        return [\n            { reset: true },\n            {\n                payload: {\n                    on: true,\n                    channel: desiredChannel,\n                }\n            }\n        ]\n    }\n} else {\n    return { reset: true };\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "63a3e87f72239626"
            ],
            [
                "6c4064c82858dc07"
            ]
        ]
    },
    {
        "id": "4ec33041d75c6b43",
        "type": "change",
        "z": "61cc80910aede988",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "amp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "9502278b14c1c63d",
        "type": "serial in",
        "z": "61cc80910aede988",
        "d": true,
        "name": "ir in",
        "serial": "7b2707f28190958d",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "2641f45143772992"
            ]
        ]
    },
    {
        "id": "2641f45143772992",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "decode",
        "func": "/** @type {Buffer} */\nconst input = msg.payload;\n\nif (input.length > 6 &&\n    input[0] === 0xDE && //header1\n    input[1] === 0x5B && //header2\n    input[2] >= 1\n) {\n    const size = input[2];\n    if (size === input.length - 5) {\n        const data = input.slice(3, input.length - 2);\n        const checksum = getChecksum(data);\n        if (checksum === input.readUint16BE(3 + data.length)) {\n            return {\n                payload: data,\n            };\n        }\n    }\n}\n\n/**\n* @param {Buffer} data\n*/\nfunction getChecksum(data) {\n    let checksum = 0x1021;\n\n    const size = data.length;\n    for (let i = 0; i <= size; i++) {\n        const byte = i === 0 ? size : data[i - 1];\n        const roll = (checksum & 0x8000) !== 0 ? true : false;\n        checksum <<= 1;\n        checksum &= 0xFFFF;\n        if (roll) { checksum |= 1; }\n        checksum ^= byte;\n    }\n\n    return checksum;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 180,
        "wires": [
            [
                "ab7a779b6528bfa8"
            ]
        ]
    },
    {
        "id": "ab7a779b6528bfa8",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "ir decode",
        "func": "/** @type {Buffer} */\nconst input = msg.payload;\n\nconst max_error = 21; // %\nconst header_mark = 9000;\nconst header_space = 4500;\nconst repeat_space = 2250;\nconst bit_mark = 562;\nconst zero_space = 562;\nconst one_space = 1687;\n\nif (input[0] === 1) {\n    /** @type {number[]} */\n    const pulses = [];\n    for (let i = 1; i < input.length; i++) {\n        pulses.push(input[i] * 50);\n    }\n\n    const decoded = decode(pulses);\n    if (decoded) {\n        node.status({ fill: \"green\", shape: \"dot\", text: decoded });\n        setTimeout(() => node.status({}), 3000);\n        return { payload: decoded };\n    }\n}\n\nfunction matches(value, target) {\n    return Math.abs(value - target) / target * 100 < max_error;\n}\n\nfunction decode(pulses) {\n    if (pulses.length < 3) {\n        return null;\n    }\n\n    if (!matches(pulses[0], header_mark)) {\n        return null;\n    }\n\n    if (matches(pulses[1], repeat_space)) {\n        if (matches(pulses[2], bit_mark) && pulses.length === 3) {\n            return 'NEC_REPEAT';\n        }\n\n        return null;\n    }\n\n    if (!matches(pulses[1], header_space) || pulses.length !== 67) {\n        return null;\n    }\n\n    let message = 0;\n    for (let i = 0; i < 32; i++) {\n        message *= 2;\n\n        if (!matches(pulses[2 + i * 2], bit_mark)) {\n            return null;\n        }\n\n        if (matches(pulses[3 + i * 2], zero_space)) {\n            continue;\n        }\n\n        if (matches(pulses[3 + i * 2], one_space)) {\n            message += 1;\n            continue;\n        }\n\n        return null;\n    }\n\n    if (!matches(pulses[66], bit_mark)) {\n        return null;\n    }\n\n    return 'NEC_' + message.toString(16);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "e4eb2b9ff631534a"
            ]
        ]
    },
    {
        "id": "e4eb2b9ff631534a",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "change volume",
        "func": "if (!flow.get('amp')) {\n    return;\n}\n\nconst currentVolume = flow.get('amp').volume;\nconst delta = currentVolume < 23 ? 3 : 6;\n\nlet desiredVolume;\n\nif (msg.payload === 'NEC_20dfc03f') {\n    desiredVolume = currentVolume - delta;\n}\nif (msg.payload === 'NEC_20df40bf') {\n    desiredVolume = currentVolume + delta;\n}\n\ndesiredVolume = Math.min(120, Math.max(0, desiredVolume));\n\nif (desiredVolume !== currentVolume) {\n    return {\n        payload: {\n            volume: desiredVolume,\n        },\n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 180,
        "wires": [
            [
                "55eab197e2677c50"
            ]
        ]
    },
    {
        "id": "63a3e87f72239626",
        "type": "trigger",
        "z": "61cc80910aede988",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 40,
        "wires": [
            [
                "6c4064c82858dc07"
            ]
        ]
    },
    {
        "id": "6c4064c82858dc07",
        "type": "delay",
        "z": "61cc80910aede988",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 770,
        "y": 60,
        "wires": [
            [
                "55eab197e2677c50"
            ]
        ]
    },
    {
        "id": "fca32fff6a920574",
        "type": "link in",
        "z": "61cc80910aede988",
        "name": "link in 1",
        "links": [
            "8fc31dc0.fe6ff",
            "b6bf4e6d.2b16c",
            "c5314d368e3fdc95",
            "253b433ba2e36077"
        ],
        "x": 95,
        "y": 80,
        "wires": [
            [
                "a6b1d4e441d9274d"
            ]
        ]
    },
    {
        "id": "169444f0f10f41cd",
        "type": "inject",
        "z": "61cc80910aede988",
        "name": "repeat",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "a6b1d4e441d9274d"
            ]
        ]
    },
    {
        "id": "72e745c5feb21fb9",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "change volume",
        "func": "const amp = flow.get('amp');\nif (!amp?.on || !flow.get('tv_on')) {\n    return;\n}\n\nconst desiredVolume = msg.payload.mute\n    ? 10\n    : Math.round(msg.payload.volume * 1.7);\nconst currentVolume = amp.volume;\nif (Math.abs(desiredVolume - currentVolume) < 2) {\n    return;\n}\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: `d: ${desiredVolume}` });\n\nreturn {\n    payload: {\n        volume: desiredVolume,\n    },\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "55eab197e2677c50"
            ]
        ]
    },
    {
        "id": "926d9d5a42bd0f61",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "LG - get volume",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "const spi = SPI.initialize(\"/dev/spidev0.0\");\n\nconst readSpdifStatus = Buffer.from([\n    0x01, //read\n    0xF6,\n    0x17,\n    0,\n    0,\n    0,\n    0,\n    0\n]);\n\nsetInterval(() => {\n    spi.transfer(readSpdifStatus, readSpdifStatus.length, onSpiMessage);\n}, 500);\n\n\n/**\n * @param {Error|null} e\n * @param {Buffer|undefined} d\n */\nfunction onSpiMessage(e, d) {\n    if (e) node.error(e);\n    else decode(d.slice(3));\n}\n\nlet lastVolume = -1;\nlet lastMute = null;\n\n/**\n * @param {Buffer} out\n */\nfunction decode(out) {\n    const padded = Buffer.concat([Buffer.alloc(3, 0), out]);\n    const value = padded.readBigInt64BE();\n\n    const SIGNATURE_MASK = 0xfffffn;\n    const SIGNATURE_VALUE = 0xf048an;\n\n    if ((value & SIGNATURE_MASK) !== SIGNATURE_VALUE) {\n        return;\n    }\n\n    const volumeByte = Number((value >> 20n) & 0xFFn);\n    const volume = volumeByte & 0x7F;\n    const mute = (volumeByte & 0x80) !== 0;\n\n    if (volume !== lastVolume || mute !== lastMute) {\n        lastVolume = volume;\n        lastMute = mute;\n        node.status({ fill: \"blue\", shape: \"dot\", text: `vol: ${volume}${mute ? ' mute' : ''}` });\n    }\n\n    node.send({\n        payload: {\n            mute,\n            volume,\n        }\n    });\n}\n",
        "finalize": "",
        "libs": [
            {
                "var": "SPI",
                "module": "pi-spi"
            }
        ],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "72e745c5feb21fb9"
            ]
        ]
    },
    {
        "id": "8ab27e65.532f6",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "Is TV on?",
        "func": "const tvStatus = msg.payload.code === 0;\n\nnode.status({\n    fill: tvStatus ? 'blue' : 'yellow',\n    shape: \"dot\",\n    text: tvStatus ? 'on' : 'off'\n});\n\nconst flowStatus = flow.get('tv_on');\nif (flowStatus !== tvStatus) {\n    flow.set('tv_on', tvStatus);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 420,
        "wires": [
            [
                "b6bf4e6d.2b16c"
            ]
        ]
    },
    {
        "id": "a8b6f0d7673b1662",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": " ping 192.168.68.49 -c 1 -w 1",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check TV",
        "x": 300,
        "y": 420,
        "wires": [
            [],
            [],
            [
                "8ab27e65.532f6"
            ]
        ]
    },
    {
        "id": "bdc5b717eb410f26",
        "type": "inject",
        "z": "61cc80910aede988",
        "name": "repeat",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "a8b6f0d7673b1662",
                "405fa020.fd7e",
                "3b193b627d4296f7",
                "926681effd534af1"
            ]
        ]
    },
    {
        "id": "c5314d368e3fdc95",
        "type": "link out",
        "z": "61cc80910aede988",
        "name": "update amp power",
        "links": [
            "50e2118a.c5d65",
            "bc4bddd9e7b73ff6",
            "fca32fff6a920574"
        ],
        "x": 655,
        "y": 480,
        "wires": []
    },
    {
        "id": "e0bdc5ad6eb97354",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "MPD status",
        "func": "const match = /\\[(\\w+)\\]/gm.exec(msg.payload);\nconst status = match?.[1];\n\nnode.status({\n    fill: status ? 'blue' : 'red',\n    shape: \"dot\",\n    text: status || 'stopped',\n});\n\nif (!status) {\n    return;\n}\n\nconst isPlaying = status === 'playing';\nconst flowStatus = flow.get('mpd_on');\nif (flowStatus !== isPlaying) {\n    flow.set('mpd_on', isPlaying);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 480,
        "wires": [
            [
                "c5314d368e3fdc95"
            ]
        ]
    },
    {
        "id": "3b193b627d4296f7",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "mpc",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check MPD",
        "x": 310,
        "y": 480,
        "wires": [
            [
                "e0bdc5ad6eb97354"
            ],
            [],
            []
        ]
    },
    {
        "id": "253b433ba2e36077",
        "type": "link out",
        "z": "61cc80910aede988",
        "name": "update amp power",
        "mode": "link",
        "links": [
            "bc4bddd9e7b73ff6",
            "fca32fff6a920574"
        ],
        "x": 655,
        "y": 360,
        "wires": []
    },
    {
        "id": "926681effd534af1",
        "type": "exec",
        "z": "61cc80910aede988",
        "command": "dbus-send --system --print-reply --dest=org.bluez /org/bluez/hci0/dev_F4_04_4C_1F_86_E1 org.freedesktop.DBus.Properties.Get string:org.bluez.MediaControl1 string:Connected || exit 0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check pickup",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "60531eca046b5249"
            ],
            [],
            []
        ]
    },
    {
        "id": "60531eca046b5249",
        "type": "function",
        "z": "61cc80910aede988",
        "name": "connected?",
        "func": "const connected = msg.payload.indexOf('boolean true') >= 0;\nif (msg.payload.indexOf('boolean true') >= 0) {\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"connected\" });\n} else {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"disconnected\" });\n}\n\nconst flowPickupOn = flow.get('pickup_on');\nif (connected !== flowPickupOn) {\n    flow.set('pickup_on', connected);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "253b433ba2e36077"
            ]
        ]
    },
    {
        "id": "55eab197e2677c50",
        "type": "amp-node",
        "z": "61cc80910aede988",
        "port": "serial:///dev/serial/by-id/usb-Silicon_Labs_CP2102_USB_to_UART_Bridge_Controller_0001-if00-port0?baudRate=57600",
        "name": "Amp",
        "x": 870,
        "y": 180,
        "wires": [
            [
                "975d84ef22ea8269",
                "4ec33041d75c6b43"
            ]
        ]
    },
    {
        "id": "975d84ef22ea8269",
        "type": "debug",
        "z": "61cc80910aede988",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 120,
        "wires": []
    }
]